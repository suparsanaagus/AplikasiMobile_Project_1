define(['dart_sdk', 'packages/flutter/src/widgets/icon.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/widgets/icon_data.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/services/text_input.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/material/text_field.dart', 'packages/flutter/src/widgets/form.dart', 'packages/intl/src/intl_helpers.dart'], (function load__packages__datetime_picker_formfield__datetime_picker_formfield_dart(dart_sdk, packages__flutter__src__widgets__icon$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__widgets__icon_data$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__services__text_input$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__material__text_field$46dart, packages__flutter__src__widgets__form$46dart, packages__intl__src__intl_helpers$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const icon = packages__flutter__src__widgets__icon$46dart.src__widgets__icon;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const editable_text = packages__flutter__src__widgets__widget_span$46dart.src__widgets__editable_text;
  const focus_manager = packages__flutter__src__widgets__widget_span$46dart.src__widgets__focus_manager;
  const focus_scope = packages__flutter__src__widgets__widget_span$46dart.src__widgets__focus_scope;
  const binding = packages__flutter__src__widgets__widget_span$46dart.src__widgets__binding;
  const icon_data = packages__flutter__src__widgets__icon_data$46dart.src__widgets__icon_data;
  const input_decorator = packages__flutter__src__material__icon_button$46dart.src__material__input_decorator;
  const theme = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const icon_button = packages__flutter__src__material__icon_button$46dart.src__material__icon_button;
  const text_input = packages__flutter__src__services__text_input$46dart.src__services__text_input;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const text_field = packages__flutter__src__material__text_field$46dart.src__material__text_field;
  const form = packages__flutter__src__widgets__form$46dart.src__widgets__form;
  const intl = packages__intl__src__intl_helpers$46dart.intl;
  var datetime_picker_formfield = Object.create(dart.library);
  var $isNotEmpty = dartx.isNotEmpty;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    _DateTimeFieldStateL: () => (T._DateTimeFieldStateL = dart.constFn(dart.legacy(datetime_picker_formfield._DateTimeFieldState)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    StringLTovoid: () => (T.StringLTovoid = dart.constFn(dart.fnType(dart.void, [T.StringL()])))(),
    TextFieldL: () => (T.TextFieldL = dart.constFn(dart.legacy(text_field.TextField)))(),
    DateTimeL: () => (T.DateTimeL = dart.constFn(dart.legacy(core.DateTime)))(),
    FormFieldStateOfDateTimeL: () => (T.FormFieldStateOfDateTimeL = dart.constFn(form.FormFieldState$(T.DateTimeL())))(),
    FormFieldStateLOfDateTimeL: () => (T.FormFieldStateLOfDateTimeL = dart.constFn(dart.legacy(T.FormFieldStateOfDateTimeL())))(),
    FormFieldStateLOfDateTimeLToTextFieldL: () => (T.FormFieldStateLOfDateTimeLToTextFieldL = dart.constFn(dart.fnType(T.TextFieldL(), [T.FormFieldStateLOfDateTimeL()])))(),
    DateTimeFieldL: () => (T.DateTimeFieldL = dart.constFn(dart.legacy(datetime_picker_formfield.DateTimeField)))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    DurationL: () => (T.DurationL = dart.constFn(dart.legacy(core.Duration)))(),
    DurationLToNull: () => (T.DurationLToNull = dart.constFn(dart.fnType(core.Null, [T.DurationL()])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "icon",
        [_Location_column]: 39,
        [_Location_line]: 26,
        [_Location_file]: null
      });
    },
    get C2() {
      return C[2] = dart.constList([C[3] || CT.C3], T._LocationL());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[2] || CT.C2,
        [_Location_name]: null,
        [_Location_column]: 28,
        [_Location_line]: 26,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/datetime_picker_formfield-1.0.0/lib/datetime_picker_formfield.dart"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58974
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget__location]: C[1] || CT.C1,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_color]: null,
        [Icon_size]: null,
        [Icon_icon]: C[4] || CT.C4
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: input_decorator.InputDecoration.prototype,
        [InputDecoration_alignLabelWithHint]: null,
        [InputDecoration_semanticCounterText]: null,
        [InputDecoration_enabled]: true,
        [InputDecoration_border]: null,
        [InputDecoration_enabledBorder]: null,
        [InputDecoration_disabledBorder]: null,
        [InputDecoration_focusedErrorBorder]: null,
        [InputDecoration_focusedBorder]: null,
        [InputDecoration_errorBorder]: null,
        [InputDecoration_hoverColor]: null,
        [InputDecoration_focusColor]: null,
        [InputDecoration_fillColor]: null,
        [InputDecoration_filled]: null,
        [InputDecoration_counterStyle]: null,
        [InputDecoration_counter]: null,
        [InputDecoration_counterText]: null,
        [InputDecoration_suffixIconConstraints]: null,
        [InputDecoration_suffixStyle]: null,
        [InputDecoration_suffixText]: null,
        [InputDecoration_suffix]: null,
        [InputDecoration_suffixIcon]: null,
        [InputDecoration_prefixStyle]: null,
        [InputDecoration_prefixText]: null,
        [InputDecoration_prefix]: null,
        [InputDecoration_prefixIconConstraints]: null,
        [InputDecoration_prefixIcon]: null,
        [InputDecoration_isCollapsed]: false,
        [InputDecoration_contentPadding]: null,
        [InputDecoration_isDense]: null,
        [InputDecoration_floatingLabelBehavior]: null,
        [InputDecoration_hasFloatingPlaceholder]: true,
        [InputDecoration_errorMaxLines]: null,
        [InputDecoration_errorStyle]: null,
        [InputDecoration_errorText]: null,
        [InputDecoration_hintMaxLines]: null,
        [InputDecoration_hintTextDirection]: null,
        [InputDecoration_hintStyle]: null,
        [InputDecoration_hintText]: null,
        [InputDecoration_helperMaxLines]: null,
        [InputDecoration_helperStyle]: null,
        [InputDecoration_helperText]: null,
        [InputDecoration_labelStyle]: null,
        [InputDecoration_labelText]: null,
        [InputDecoration_icon]: null
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: text_input.TextCapitalization.prototype,
        [_name]: "TextCapitalization.none",
        index: 3
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$]: "TextAlign.start",
        index: 4
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 20,
        [EdgeInsets_right]: 20,
        [EdgeInsets_top]: 20,
        [EdgeInsets_left]: 20
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "icon",
        [_Location_column]: 27,
        [_Location_line]: 85,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPressed",
        [_Location_column]: 27,
        [_Location_line]: 86,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.constList([C[11] || CT.C11, C[12] || CT.C12], T._LocationL());
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[10] || CT.C10,
        [_Location_name]: null,
        [_Location_column]: 25,
        [_Location_line]: 84,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/datetime_picker_formfield-1.0.0/lib/datetime_picker_formfield.dart"
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 17,
        [_Location_line]: 79,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 17,
        [_Location_line]: 80,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "decoration",
        [_Location_column]: 17,
        [_Location_line]: 81,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "keyboardType",
        [_Location_column]: 17,
        [_Location_line]: 90,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textInputAction",
        [_Location_column]: 17,
        [_Location_line]: 91,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "style",
        [_Location_column]: 17,
        [_Location_line]: 93,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "strutStyle",
        [_Location_column]: 17,
        [_Location_line]: 94,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textAlign",
        [_Location_column]: 17,
        [_Location_line]: 95,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textDirection",
        [_Location_column]: 17,
        [_Location_line]: 96,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textCapitalization",
        [_Location_column]: 17,
        [_Location_line]: 97,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofocus",
        [_Location_column]: 17,
        [_Location_line]: 98,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "readOnly",
        [_Location_column]: 17,
        [_Location_line]: 99,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showCursor",
        [_Location_column]: 17,
        [_Location_line]: 100,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "obscureText",
        [_Location_column]: 17,
        [_Location_line]: 101,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autocorrect",
        [_Location_column]: 17,
        [_Location_line]: 102,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxLengthEnforced",
        [_Location_column]: 17,
        [_Location_line]: 103,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxLines",
        [_Location_column]: 17,
        [_Location_line]: 104,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minLines",
        [_Location_column]: 17,
        [_Location_line]: 105,
        [_Location_file]: null
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "expands",
        [_Location_column]: 17,
        [_Location_line]: 106,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxLength",
        [_Location_column]: 17,
        [_Location_line]: 107,
        [_Location_file]: null
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onChanged",
        [_Location_column]: 17,
        [_Location_line]: 108,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onEditingComplete",
        [_Location_column]: 17,
        [_Location_line]: 110,
        [_Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSubmitted",
        [_Location_column]: 17,
        [_Location_line]: 111,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "inputFormatters",
        [_Location_column]: 17,
        [_Location_line]: 114,
        [_Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enabled",
        [_Location_column]: 17,
        [_Location_line]: 115,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursorWidth",
        [_Location_column]: 17,
        [_Location_line]: 116,
        [_Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursorRadius",
        [_Location_column]: 17,
        [_Location_line]: 117,
        [_Location_file]: null
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cursorColor",
        [_Location_column]: 17,
        [_Location_line]: 118,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "scrollPadding",
        [_Location_column]: 17,
        [_Location_line]: 119,
        [_Location_file]: null
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "keyboardAppearance",
        [_Location_column]: 17,
        [_Location_line]: 120,
        [_Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableInteractiveSelection",
        [_Location_column]: 17,
        [_Location_line]: 121,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "buildCounter",
        [_Location_column]: 17,
        [_Location_line]: 122,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.constList([C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42, C[43] || CT.C43, C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46], T._LocationL());
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[14] || CT.C14,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 78,
        [_Location_file]: "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/datetime_picker_formfield-1.0.0/lib/datetime_picker_formfield.dart"
      });
    }
  }, false);
  var C = Array(47).fill(void 0);
  var I = ["package:datetime_picker_formfield/datetime_picker_formfield.dart"];
  var format$ = dart.privateName(datetime_picker_formfield, "DateTimeField.format");
  var onShowPicker$ = dart.privateName(datetime_picker_formfield, "DateTimeField.onShowPicker");
  var resetIcon$ = dart.privateName(datetime_picker_formfield, "DateTimeField.resetIcon");
  var controller$ = dart.privateName(datetime_picker_formfield, "DateTimeField.controller");
  var focusNode$ = dart.privateName(datetime_picker_formfield, "DateTimeField.focusNode");
  var readOnly$ = dart.privateName(datetime_picker_formfield, "DateTimeField.readOnly");
  var onChanged$ = dart.privateName(datetime_picker_formfield, "DateTimeField.onChanged");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var Widget__location = dart.privateName(framework, "Widget._location");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var Icon_textDirection = dart.privateName(icon, "Icon.textDirection");
  var Icon_semanticLabel = dart.privateName(icon, "Icon.semanticLabel");
  var Icon_color = dart.privateName(icon, "Icon.color");
  var Icon_size = dart.privateName(icon, "Icon.size");
  var IconData_matchTextDirection = dart.privateName(icon_data, "IconData.matchTextDirection");
  var IconData_fontPackage = dart.privateName(icon_data, "IconData.fontPackage");
  var IconData_fontFamily = dart.privateName(icon_data, "IconData.fontFamily");
  var IconData_codePoint = dart.privateName(icon_data, "IconData.codePoint");
  var Icon_icon = dart.privateName(icon, "Icon.icon");
  var InputDecoration_alignLabelWithHint = dart.privateName(input_decorator, "InputDecoration.alignLabelWithHint");
  var InputDecoration_semanticCounterText = dart.privateName(input_decorator, "InputDecoration.semanticCounterText");
  var InputDecoration_enabled = dart.privateName(input_decorator, "InputDecoration.enabled");
  var InputDecoration_border = dart.privateName(input_decorator, "InputDecoration.border");
  var InputDecoration_enabledBorder = dart.privateName(input_decorator, "InputDecoration.enabledBorder");
  var InputDecoration_disabledBorder = dart.privateName(input_decorator, "InputDecoration.disabledBorder");
  var InputDecoration_focusedErrorBorder = dart.privateName(input_decorator, "InputDecoration.focusedErrorBorder");
  var InputDecoration_focusedBorder = dart.privateName(input_decorator, "InputDecoration.focusedBorder");
  var InputDecoration_errorBorder = dart.privateName(input_decorator, "InputDecoration.errorBorder");
  var InputDecoration_hoverColor = dart.privateName(input_decorator, "InputDecoration.hoverColor");
  var InputDecoration_focusColor = dart.privateName(input_decorator, "InputDecoration.focusColor");
  var InputDecoration_fillColor = dart.privateName(input_decorator, "InputDecoration.fillColor");
  var InputDecoration_filled = dart.privateName(input_decorator, "InputDecoration.filled");
  var InputDecoration_counterStyle = dart.privateName(input_decorator, "InputDecoration.counterStyle");
  var InputDecoration_counter = dart.privateName(input_decorator, "InputDecoration.counter");
  var InputDecoration_counterText = dart.privateName(input_decorator, "InputDecoration.counterText");
  var InputDecoration_suffixIconConstraints = dart.privateName(input_decorator, "InputDecoration.suffixIconConstraints");
  var InputDecoration_suffixStyle = dart.privateName(input_decorator, "InputDecoration.suffixStyle");
  var InputDecoration_suffixText = dart.privateName(input_decorator, "InputDecoration.suffixText");
  var InputDecoration_suffix = dart.privateName(input_decorator, "InputDecoration.suffix");
  var InputDecoration_suffixIcon = dart.privateName(input_decorator, "InputDecoration.suffixIcon");
  var InputDecoration_prefixStyle = dart.privateName(input_decorator, "InputDecoration.prefixStyle");
  var InputDecoration_prefixText = dart.privateName(input_decorator, "InputDecoration.prefixText");
  var InputDecoration_prefix = dart.privateName(input_decorator, "InputDecoration.prefix");
  var InputDecoration_prefixIconConstraints = dart.privateName(input_decorator, "InputDecoration.prefixIconConstraints");
  var InputDecoration_prefixIcon = dart.privateName(input_decorator, "InputDecoration.prefixIcon");
  var InputDecoration_isCollapsed = dart.privateName(input_decorator, "InputDecoration.isCollapsed");
  var InputDecoration_contentPadding = dart.privateName(input_decorator, "InputDecoration.contentPadding");
  var InputDecoration_isDense = dart.privateName(input_decorator, "InputDecoration.isDense");
  var InputDecoration_floatingLabelBehavior = dart.privateName(input_decorator, "InputDecoration.floatingLabelBehavior");
  var InputDecoration_hasFloatingPlaceholder = dart.privateName(input_decorator, "InputDecoration.hasFloatingPlaceholder");
  var InputDecoration_errorMaxLines = dart.privateName(input_decorator, "InputDecoration.errorMaxLines");
  var InputDecoration_errorStyle = dart.privateName(input_decorator, "InputDecoration.errorStyle");
  var InputDecoration_errorText = dart.privateName(input_decorator, "InputDecoration.errorText");
  var InputDecoration_hintMaxLines = dart.privateName(input_decorator, "InputDecoration.hintMaxLines");
  var InputDecoration_hintTextDirection = dart.privateName(input_decorator, "InputDecoration.hintTextDirection");
  var InputDecoration_hintStyle = dart.privateName(input_decorator, "InputDecoration.hintStyle");
  var InputDecoration_hintText = dart.privateName(input_decorator, "InputDecoration.hintText");
  var InputDecoration_helperMaxLines = dart.privateName(input_decorator, "InputDecoration.helperMaxLines");
  var InputDecoration_helperStyle = dart.privateName(input_decorator, "InputDecoration.helperStyle");
  var InputDecoration_helperText = dart.privateName(input_decorator, "InputDecoration.helperText");
  var InputDecoration_labelStyle = dart.privateName(input_decorator, "InputDecoration.labelStyle");
  var InputDecoration_labelText = dart.privateName(input_decorator, "InputDecoration.labelText");
  var InputDecoration_icon = dart.privateName(input_decorator, "InputDecoration.icon");
  var _name = dart.privateName(text_input, "_name");
  var _name$ = dart.privateName(ui, "_name");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var _effectiveController = dart.privateName(datetime_picker_formfield, "_effectiveController");
  var _effectiveFocusNode = dart.privateName(datetime_picker_formfield, "_effectiveFocusNode");
  datetime_picker_formfield.DateTimeField = class DateTimeField extends form.FormField$(dart.legacy(core.DateTime)) {
    get format() {
      return this[format$];
    }
    set format(value) {
      super.format = value;
    }
    get onShowPicker() {
      return this[onShowPicker$];
    }
    set onShowPicker(value) {
      super.onShowPicker = value;
    }
    get resetIcon() {
      return this[resetIcon$];
    }
    set resetIcon(value) {
      super.resetIcon = value;
    }
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    get focusNode() {
      return this[focusNode$];
    }
    set focusNode(value) {
      super.focusNode = value;
    }
    get readOnly() {
      return this[readOnly$];
    }
    set readOnly(value) {
      super.readOnly = value;
    }
    get onChanged() {
      return this[onChanged$];
    }
    set onChanged(value) {
      super.onChanged = value;
    }
    createState() {
      return new datetime_picker_formfield._DateTimeFieldState.new();
    }
    static tryFormat(date, format) {
      if (date != null) {
        try {
          return format.format(date);
        } catch (e$) {
          let e = dart.getThrown(e$);
        }
      }
      return "";
    }
    static tryParse(string, format) {
      let t1, t1$;
      if (dart.test((t1$ = (t1 = string, t1 == null ? null : t1[$isNotEmpty]), t1$ == null ? false : t1$))) {
        try {
          return format.parse(string);
        } catch (e$) {
          let e = dart.getThrown(e$);
        }
      }
      return null;
    }
    static combine(date, time) {
      let t2, t2$, t2$0, t2$1;
      return new core.DateTime.new(date.year, date.month, date.day, (t2$ = (t2 = time, t2 == null ? null : t2.hour), t2$ == null ? 0 : t2$), (t2$1 = (t2$0 = time, t2$0 == null ? null : t2$0.minute), t2$1 == null ? 0 : t2$1));
    }
    static convert(time) {
      let t2, t2$, t2$0, t2$1;
      return new core.DateTime.new(1, 1, 1, (t2$ = (t2 = time, t2 == null ? null : t2.hour), t2$ == null ? 0 : t2$), (t2$1 = (t2$0 = time, t2$0 == null ? null : t2$0.minute), t2$1 == null ? 0 : t2$1));
    }
  };
  (datetime_picker_formfield.DateTimeField.new = function(opts) {
    let t0;
    let format = opts && 'format' in opts ? opts.format : null;
    let onShowPicker = opts && 'onShowPicker' in opts ? opts.onShowPicker : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let onSaved = opts && 'onSaved' in opts ? opts.onSaved : null;
    let validator = opts && 'validator' in opts ? opts.validator : null;
    let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
    let autovalidate = opts && 'autovalidate' in opts ? opts.autovalidate : false;
    let enabled = opts && 'enabled' in opts ? opts.enabled : true;
    let resetIcon = opts && 'resetIcon' in opts ? opts.resetIcon : C[0] || CT.C0;
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : C[5] || CT.C5;
    let keyboardType = opts && 'keyboardType' in opts ? opts.keyboardType : null;
    let textCapitalization = opts && 'textCapitalization' in opts ? opts.textCapitalization : C[6] || CT.C6;
    let textInputAction = opts && 'textInputAction' in opts ? opts.textInputAction : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[7] || CT.C7;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : true;
    let showCursor = opts && 'showCursor' in opts ? opts.showCursor : null;
    let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
    let autocorrect = opts && 'autocorrect' in opts ? opts.autocorrect : true;
    let maxLengthEnforced = opts && 'maxLengthEnforced' in opts ? opts.maxLengthEnforced : true;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : 1;
    let minLines = opts && 'minLines' in opts ? opts.minLines : null;
    let expands = opts && 'expands' in opts ? opts.expands : false;
    let maxLength = opts && 'maxLength' in opts ? opts.maxLength : null;
    let onEditingComplete = opts && 'onEditingComplete' in opts ? opts.onEditingComplete : null;
    let onFieldSubmitted = opts && 'onFieldSubmitted' in opts ? opts.onFieldSubmitted : null;
    let inputFormatters = opts && 'inputFormatters' in opts ? opts.inputFormatters : null;
    let cursorWidth = opts && 'cursorWidth' in opts ? opts.cursorWidth : 2;
    let cursorRadius = opts && 'cursorRadius' in opts ? opts.cursorRadius : null;
    let cursorColor = opts && 'cursorColor' in opts ? opts.cursorColor : null;
    let keyboardAppearance = opts && 'keyboardAppearance' in opts ? opts.keyboardAppearance : null;
    let scrollPadding = opts && 'scrollPadding' in opts ? opts.scrollPadding : C[8] || CT.C8;
    let enableInteractiveSelection = opts && 'enableInteractiveSelection' in opts ? opts.enableInteractiveSelection : true;
    let buildCounter = opts && 'buildCounter' in opts ? opts.buildCounter : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[format$] = format;
    this[onShowPicker$] = onShowPicker;
    this[resetIcon$] = resetIcon;
    this[onChanged$] = onChanged;
    this[controller$] = controller;
    this[focusNode$] = focusNode;
    this[readOnly$] = readOnly;
    datetime_picker_formfield.DateTimeField.__proto__.new.call(this, {key: key, autovalidate: autovalidate, initialValue: initialValue, enabled: (t0 = enabled, t0 == null ? true : t0), validator: validator, onSaved: onSaved, builder: dart.fn(field => {
        let t0;
        let state = T._DateTimeFieldStateL().as(field);
        let effectiveDecoration = (t0 = decoration, t0 == null ? C[5] || CT.C5 : t0).applyDefaults(theme.Theme.of(field.context).inputDecorationTheme);
        return new text_field.TextField.new({controller: state[_effectiveController], focusNode: state[_effectiveFocusNode], decoration: effectiveDecoration.copyWith({errorText: field.errorText, suffixIcon: dart.test(state.shouldShowClearIcon(effectiveDecoration)) ? new icon_button.IconButton.new({icon: resetIcon, onPressed: dart.bind(state, 'clear'), $creationLocationd_0dea112b090073317d4: C[9] || CT.C9}) : null}), keyboardType: keyboardType, textInputAction: textInputAction, style: style, strutStyle: strutStyle, textAlign: textAlign, textDirection: textDirection, textCapitalization: textCapitalization, autofocus: autofocus, readOnly: readOnly, showCursor: showCursor, obscureText: obscureText, autocorrect: autocorrect, maxLengthEnforced: maxLengthEnforced, maxLines: maxLines, minLines: minLines, expands: expands, maxLength: maxLength, onChanged: dart.fn(string => field.didChange(datetime_picker_formfield.DateTimeField.tryParse(string, format)), T.StringLTovoid()), onEditingComplete: onEditingComplete, onSubmitted: dart.fn(string => onFieldSubmitted == null ? null : onFieldSubmitted(datetime_picker_formfield.DateTimeField.tryParse(string, format)), T.StringLTovoid()), inputFormatters: inputFormatters, enabled: enabled, cursorWidth: cursorWidth, cursorRadius: cursorRadius, cursorColor: cursorColor, scrollPadding: scrollPadding, keyboardAppearance: keyboardAppearance, enableInteractiveSelection: enableInteractiveSelection, buildCounter: buildCounter, $creationLocationd_0dea112b090073317d4: C[13] || CT.C13});
      }, T.FormFieldStateLOfDateTimeLToTextFieldL()), $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = datetime_picker_formfield.DateTimeField.prototype;
  dart.addTypeTests(datetime_picker_formfield.DateTimeField);
  dart.addTypeCaches(datetime_picker_formfield.DateTimeField);
  dart.setMethodSignature(datetime_picker_formfield.DateTimeField, () => ({
    __proto__: dart.getMethods(datetime_picker_formfield.DateTimeField.__proto__),
    createState: dart.fnType(dart.legacy(datetime_picker_formfield._DateTimeFieldState), [])
  }));
  dart.setLibraryUri(datetime_picker_formfield.DateTimeField, I[0]);
  dart.setFieldSignature(datetime_picker_formfield.DateTimeField, () => ({
    __proto__: dart.getFields(datetime_picker_formfield.DateTimeField.__proto__),
    format: dart.finalFieldType(dart.legacy(intl.DateFormat)),
    onShowPicker: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(core.DateTime))), [dart.legacy(framework.BuildContext), dart.legacy(core.DateTime)]))),
    resetIcon: dart.finalFieldType(dart.legacy(icon.Icon)),
    controller: dart.finalFieldType(dart.legacy(editable_text.TextEditingController)),
    focusNode: dart.finalFieldType(dart.legacy(focus_manager.FocusNode)),
    readOnly: dart.finalFieldType(dart.legacy(core.bool)),
    onChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.DateTime)])))
  }));
  var _controller = dart.privateName(datetime_picker_formfield, "_controller");
  var _focusNode = dart.privateName(datetime_picker_formfield, "_focusNode");
  var _handleControllerChanged = dart.privateName(datetime_picker_formfield, "_handleControllerChanged");
  var _handleFocusChanged = dart.privateName(datetime_picker_formfield, "_handleFocusChanged");
  var _hideKeyboard = dart.privateName(datetime_picker_formfield, "_hideKeyboard");
  datetime_picker_formfield._DateTimeFieldState = class _DateTimeFieldState extends form.FormFieldState$(dart.legacy(core.DateTime)) {
    get widget() {
      return T.DateTimeFieldL().as(super.widget);
    }
    get [_effectiveController]() {
      let t2;
      t2 = this.widget.controller;
      return t2 == null ? this[_controller] : t2;
    }
    get [_effectiveFocusNode]() {
      let t2;
      t2 = this.widget.focusNode;
      return t2 == null ? this[_focusNode] : t2;
    }
    get hasFocus() {
      return this[_effectiveFocusNode].hasFocus;
    }
    get hasText() {
      return this[_effectiveController].text[$isNotEmpty];
    }
    initState() {
      let t2, t2$;
      super.initState();
      if (this.widget.controller == null) {
        this[_controller] = new editable_text.TextEditingController.new({text: this.format(this.widget.initialValue)});
        this[_controller].addListener(dart.bind(this, _handleControllerChanged));
      }
      if (this.widget.focusNode == null) {
        this[_focusNode] = new focus_manager.FocusNode.new();
        this[_focusNode].addListener(dart.bind(this, _handleFocusChanged));
      }
      t2 = this.widget.controller;
      t2 == null ? null : t2.addListener(dart.bind(this, _handleControllerChanged));
      t2$ = this.widget.focusNode;
      t2$ == null ? null : t2$.addListener(dart.bind(this, _handleFocusChanged));
    }
    didUpdateWidget(oldWidget) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3;
      T.DateTimeFieldL().as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!dart.equals(this.widget.controller, oldWidget.controller)) {
        t2 = oldWidget.controller;
        t2 == null ? null : t2.removeListener(dart.bind(this, _handleControllerChanged));
        t2$ = this.widget.controller;
        t2$ == null ? null : t2$.addListener(dart.bind(this, _handleControllerChanged));
        if (oldWidget.controller != null && this.widget.controller == null) {
          this[_controller] = new editable_text.TextEditingController.fromValue(oldWidget.controller.value);
          this[_controller].addListener(dart.bind(this, _handleControllerChanged));
        }
        if (this.widget.controller != null) {
          this.setValue(this.parse(this.widget.controller.text));
          if (oldWidget.controller == null) {
            t2$0 = this[_controller];
            t2$0 == null ? null : t2$0.dispose();
            this[_controller] = null;
          }
        }
      }
      if (!dart.equals(this.widget.focusNode, oldWidget.focusNode)) {
        t2$1 = oldWidget.focusNode;
        t2$1 == null ? null : t2$1.removeListener(dart.bind(this, _handleFocusChanged));
        t2$2 = this.widget.focusNode;
        t2$2 == null ? null : t2$2.addListener(dart.bind(this, _handleFocusChanged));
        if (oldWidget.focusNode != null && this.widget.focusNode == null) {
          this[_focusNode] = new focus_manager.FocusNode.new();
          this[_focusNode].addListener(dart.bind(this, _handleFocusChanged));
        }
        if (this.widget.focusNode != null && oldWidget.focusNode == null) {
          t2$3 = this[_focusNode];
          t2$3 == null ? null : t2$3.dispose();
          this[_focusNode] = null;
        }
      }
    }
    didChange(value) {
      let t3, t2;
      T.DateTimeL().as(value);
      if (this.widget.onChanged != null) {
        t2 = this.widget;
        t3 = value;
        t2.onChanged(t3);
      }
      super.didChange(value);
    }
    dispose() {
      let t2, t2$, t2$0, t2$1;
      t2 = this[_controller];
      t2 == null ? null : t2.dispose();
      t2$ = this[_focusNode];
      t2$ == null ? null : t2$.dispose();
      t2$0 = this.widget.controller;
      t2$0 == null ? null : t2$0.removeListener(dart.bind(this, _handleControllerChanged));
      t2$1 = this.widget.focusNode;
      t2$1 == null ? null : t2$1.removeListener(dart.bind(this, _handleFocusChanged));
      super.dispose();
    }
    reset() {
      super.reset();
      this[_effectiveController].text = this.format(this.widget.initialValue);
      this.didChange(this.widget.initialValue);
    }
    [_handleControllerChanged]() {
      if (this[_effectiveController].text != this.format(this.value)) this.didChange(this.parse(this[_effectiveController].text));
    }
    format(date) {
      return datetime_picker_formfield.DateTimeField.tryFormat(date, this.widget.format);
    }
    parse(text) {
      return datetime_picker_formfield.DateTimeField.tryParse(text, this.widget.format);
    }
    requestUpdate() {
      return async.async(dart.void, (function* requestUpdate() {
        let t4, t3, t2;
        if (!dart.test(this.isShowingDialog)) {
          this.isShowingDialog = true;
          let newValue = (yield (t2 = this.widget, t3 = this.context, t4 = this.value, t2.onShowPicker(t3, t4)));
          this.isShowingDialog = false;
          if (newValue != null) {
            this[_effectiveController].text = this.format(newValue);
          }
        }
      }).bind(this));
    }
    [_handleFocusChanged]() {
      if (dart.test(this.hasFocus) && !dart.test(this.hadFocus) && (!dart.test(this.hasText) || dart.test(this.widget.readOnly))) {
        this.hadFocus = this.hasFocus;
        this[_hideKeyboard]();
        this.requestUpdate();
      } else {
        this.hadFocus = this.hasFocus;
      }
    }
    [_hideKeyboard]() {
      T.FutureOfvoid().microtask(dart.fn(() => focus_scope.FocusScope.of(this.context).requestFocus(new focus_manager.FocusNode.new()), T.VoidTovoid()));
    }
    clear() {
      return async.async(dart.void, (function* clear() {
        this[_hideKeyboard]();
        binding.WidgetsBinding.instance.addPostFrameCallback(dart.fn(_ => {
          this.setState(dart.fn(() => this[_effectiveController].clear(), T.VoidTovoid()));
        }, T.DurationLToNull()));
      }).bind(this));
    }
    shouldShowClearIcon(decoration = null) {
      let t2;
      return this.widget.resetIcon != null && (dart.test(this.hasText) || dart.test(this.hasFocus)) && (t2 = decoration, t2 == null ? null : t2.suffixIcon) == null;
    }
  };
  (datetime_picker_formfield._DateTimeFieldState.new = function() {
    this[_controller] = null;
    this[_focusNode] = null;
    this.isShowingDialog = false;
    this.hadFocus = false;
    datetime_picker_formfield._DateTimeFieldState.__proto__.new.call(this);
    ;
  }).prototype = datetime_picker_formfield._DateTimeFieldState.prototype;
  dart.addTypeTests(datetime_picker_formfield._DateTimeFieldState);
  dart.addTypeCaches(datetime_picker_formfield._DateTimeFieldState);
  dart.setMethodSignature(datetime_picker_formfield._DateTimeFieldState, () => ({
    __proto__: dart.getMethods(datetime_picker_formfield._DateTimeFieldState.__proto__),
    didUpdateWidget: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    didChange: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    [_handleControllerChanged]: dart.fnType(dart.void, []),
    format: dart.fnType(dart.legacy(core.String), [dart.legacy(core.DateTime)]),
    parse: dart.fnType(dart.legacy(core.DateTime), [dart.legacy(core.String)]),
    requestUpdate: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    [_handleFocusChanged]: dart.fnType(dart.void, []),
    [_hideKeyboard]: dart.fnType(dart.void, []),
    clear: dart.fnType(dart.void, []),
    shouldShowClearIcon: dart.fnType(dart.legacy(core.bool), [], [dart.legacy(input_decorator.InputDecoration)])
  }));
  dart.setGetterSignature(datetime_picker_formfield._DateTimeFieldState, () => ({
    __proto__: dart.getGetters(datetime_picker_formfield._DateTimeFieldState.__proto__),
    widget: dart.legacy(datetime_picker_formfield.DateTimeField),
    [_effectiveController]: dart.legacy(editable_text.TextEditingController),
    [_effectiveFocusNode]: dart.legacy(focus_manager.FocusNode),
    hasFocus: dart.legacy(core.bool),
    hasText: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(datetime_picker_formfield._DateTimeFieldState, I[0]);
  dart.setFieldSignature(datetime_picker_formfield._DateTimeFieldState, () => ({
    __proto__: dart.getFields(datetime_picker_formfield._DateTimeFieldState.__proto__),
    [_controller]: dart.fieldType(dart.legacy(editable_text.TextEditingController)),
    [_focusNode]: dart.fieldType(dart.legacy(focus_manager.FocusNode)),
    isShowingDialog: dart.fieldType(dart.legacy(core.bool)),
    hadFocus: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.trackLibraries("packages/datetime_picker_formfield/datetime_picker_formfield.dart", {
    "package:datetime_picker_formfield/datetime_picker_formfield.dart": datetime_picker_formfield
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["datetime_picker_formfield.dart"],"names":[],"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","file":"../../../../../../../D:/packages/datetime_picker_formfield/datetime_picker_formfield.dart.lib.js"}');
  // Exports:
  return {
    datetime_picker_formfield: datetime_picker_formfield
  };
}));

//# sourceMappingURL=datetime_picker_formfield.dart.lib.js.map
